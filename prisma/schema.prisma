generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  password      String
  curses        Curse[]
  game          Game[]
  questions     Question[]
  subscriptions Subscription[]
  teams         Team[]         @relation("TeamToUser")
}

model Subscription {
  id     String @id @default(uuid())
  userId String
  sub    String
  user   User   @relation(fields: [userId], references: [id])
}

model Game {
  id                String      @id @default(uuid())
  name              String
  ownerId           String
  answer_time_limit Int
  dice_cost         Int?
  jail_duration     Int
  curse_costs       Int[]
  owner             User        @relation(fields: [ownerId], references: [id])
  game_curses       GameCurse[]
  rounds            Round[]
  game_questions    Question[]  @relation("GameToQuestion")
}

model Round {
  id         String              @id @default(uuid())
  gameId     String
  start_time DateTime?
  end_time   DateTime?
  winner_id  String?
  game       Game                @relation(fields: [gameId], references: [id], onDelete: Cascade)
  winner     Team?               @relation(fields: [winner_id], references: [id], onDelete: Cascade)
  teams      TeamRound[]
  curses     TeamRoundCurse[]
  questions  TeamRoundQuestion[]
}

model Team {
  id         String              @id @default(uuid())
  name       String
  won_rounds Round[]
  rounds     TeamRound[]
  curses     TeamRoundCurse[]
  questions  TeamRoundQuestion[]
  members    User[]              @relation("TeamToUser")
}

model TeamRound {
  teamId  String
  roundId String
  role    Role
  coins   Int    @default(0)
  round   Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)
  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([teamId, roundId])
}

model Question {
  id      String              @id @default(uuid())
  content String
  type    String
  cost    Int
  details String?
  ownerId String
  owner   User                @relation(fields: [ownerId], references: [id])
  teams   TeamRoundQuestion[]
  games   Game[]              @relation("GameToQuestion")
}

model Curse {
  id                String           @id @default(uuid())
  defaultDifficulty Int?
  name              String
  effect            String
  ownerId           String
  owner             User             @relation(fields: [ownerId], references: [id])
  games             GameCurse[]
  rounds            TeamRoundCurse[]
}

model GameCurse {
  gameId     String
  curseId    String
  difficulty Int
  curse      Curse  @relation(fields: [curseId], references: [id], onDelete: Cascade)
  game       Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([gameId, curseId])
}

model TeamRoundCurse {
  teamId     String
  curseId    String
  roundId    String
  vetoed_at  DateTime?
  lifted_at  DateTime?
  created_at DateTime  @default(now())
  curse      Curse     @relation(fields: [curseId], references: [id], onDelete: Cascade)
  round      Round     @relation(fields: [roundId], references: [id], onDelete: Cascade)
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([roundId, curseId, teamId, created_at])
}

model TeamRoundQuestion {
  teamId      String
  questionId  String
  roundId     String
  answered_at DateTime?
  answer      String?
  created_at  DateTime  @default(now())
  photo_url   String?
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  round       Round     @relation(fields: [roundId], references: [id], onDelete: Cascade)
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([teamId, questionId, roundId])
}

enum Role {
  HIDER
  SEEKER
}
